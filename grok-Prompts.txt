I would like to make a 2D arcade game engine for Windows using NodeJS, ElectronJS, VueJS, and BabylonJS. The goal is to have a multi-monitor game engine where each screen on the computer has a different application modal window and each application modal window contains a canvas with a BabylonJS camera that renders from a single BabylonJS scene. The scene is controlled by a single BabylonJS engine. I realize that the default behavior in electronJS is to have each window be a separate process, however, there is an option in electronJS to set the affinity for different windows such that they can actually share the same process with the main application window. I realize there may be some risks with this, however, it is common practice in windows programming, so I'm not really worried about it. I tried building this project before and had some major issues with the ortho camera in BabylonJS not rendering geometric objects such as primitives like squares, circles or meshes, so it was determined to use free cameras and align their camera position coordinates, camera target coordinates and view frustum such that each camera would be adjacent aligned at the Z=0 plane and vertically oriented in the -Z axes. I think I worked really hard to get all the math figured out for this, so I have some ref code from the previous project if needed, so hopefully this will be easy this time around. So I would like to setup some ground rules before we get any further. #1. I want to make sure that we are always using JavaScript ES6/ES7 syntax with modern import/export statements. #2. I want to make sure we completely avoid any usage of the term "this" in the code as it can confuse scope and cause issues with maintainability, future development efforts or code support, and tech debt. #3. I want to make sure we are always and ONLY using a compositional programing model! So none of this inheritance, or polymorphism messy business. Lets try and keep the code simple and clean. Now the goal is to build a basic line-vector object multi-monitor remake of the classic game asteroids. So there will be object collision, player movement, targeting, shooting bullets, generating objects, destroying objects, spawning new objects as they break up, and a wrap-around game space. A player ship with thrusters....and more. Later on we will need lives, power up rewards to gain new lives, a scoring system, a way to track level difficulty as the user completes levels, and new more difficult levels are loaded, a menu system. But right now I just want to make sure we can get the most basic game mechanics functioning. Again I want to make sure that all of the game objects and player ship, bullets and everything are built with 2D vector based primitive objects or custom 2D mesh based vector objects.....not sprites. So that should be enough information for us to get started.....LETS GO!! Going for a classic simple black and white asteroid vibe here! Starting completely from scratch here so lets get this right from the get-go!! What files should I make to get this going? What should the contents of those files be? If we need a complicated boot-up and initialization process then lets please make sure to work on a multi-stage bootstrap process that will essentially initialize the BabylonJS scene space with the generic control window, and using some kind of a semaphore or mutex system flag that the initial bootup process is completed...that way we can have a multi-stage event-driven boot up process.